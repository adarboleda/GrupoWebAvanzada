{"ast":null,"code":"// URL base del backend\nconst API_URL = \"http://localhost:3000/api/obreros\";\n\n// Servicio para manejar todas las peticiones relacionadas con empleados\n\n/**\r\n * Obtener todos los empleados\r\n */\nexport const obtenerTodosLosEmpleados = async () => {\n  try {\n    const response = await fetch(API_URL); // Llamada a la API\n    if (!response.ok) {\n      throw new Error(\"Error al obtener empleados\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error en obtenerTodosLosEmpleados:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Obtener un empleado por ID\r\n */\nexport const obtenerEmpleadoPorId = async id => {\n  try {\n    const response = await fetch(`${API_URL}/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Error al obtener el empleado\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error en obtenerEmpleadoPorId:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Crear un nuevo empleado\r\n */\nexport const crearEmpleado = async empleado => {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(empleado)\n    });\n    if (!response.ok) {\n      throw new Error(\"Error al crear el empleado\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error en crearEmpleado:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Actualizar un empleado existente\r\n */\nexport const actualizarEmpleado = async (id, empleado) => {\n  try {\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(empleado)\n    });\n    if (!response.ok) {\n      throw new Error(\"Error al actualizar el empleado\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error en actualizarEmpleado:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Eliminar un empleado\r\n */\nexport const eliminarEmpleado = async id => {\n  try {\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Error al eliminar el empleado\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error en eliminarEmpleado:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Obtener el detalle del salario de un empleado\r\n */\nexport const obtenerSalarioEmpleado = async id => {\n  try {\n    const response = await fetch(`${API_URL}/${id}/salario`);\n    if (!response.ok) {\n      throw new Error(\"Error al calcular el salario\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error en obtenerSalarioEmpleado:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","obtenerTodosLosEmpleados","response","fetch","ok","Error","json","error","console","obtenerEmpleadoPorId","id","crearEmpleado","empleado","method","headers","body","JSON","stringify","actualizarEmpleado","eliminarEmpleado","obtenerSalarioEmpleado"],"sources":["C:/ESPE/WebAvanzada/GrupoWebAvanzada/3.salarios_orm/empleados-front/src/services/empleadoService.js"],"sourcesContent":["// URL base del backend\r\nconst API_URL = \"http://localhost:3000/api/obreros\";\r\n\r\n// Servicio para manejar todas las peticiones relacionadas con empleados\r\n\r\n/**\r\n * Obtener todos los empleados\r\n */\r\nexport const obtenerTodosLosEmpleados = async () => {\r\n  try {\r\n    const response = await fetch(API_URL); // Llamada a la API\r\n    if (!response.ok) {\r\n      throw new Error(\"Error al obtener empleados\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error en obtenerTodosLosEmpleados:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtener un empleado por ID\r\n */\r\nexport const obtenerEmpleadoPorId = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Error al obtener el empleado\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error en obtenerEmpleadoPorId:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Crear un nuevo empleado\r\n */\r\nexport const crearEmpleado = async (empleado) => {\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(empleado),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Error al crear el empleado\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error en crearEmpleado:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Actualizar un empleado existente\r\n */\r\nexport const actualizarEmpleado = async (id, empleado) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(empleado),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Error al actualizar el empleado\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error en actualizarEmpleado:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Eliminar un empleado\r\n */\r\nexport const eliminarEmpleado = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Error al eliminar el empleado\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error en eliminarEmpleado:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Obtener el detalle del salario de un empleado\r\n */\r\nexport const obtenerSalarioEmpleado = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/${id}/salario`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Error al calcular el salario\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error en obtenerSalarioEmpleado:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}